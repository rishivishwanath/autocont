name: Content Automation Pipeline

on:
  schedule:
    - cron: '0 * * * *'  # Every hour
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if recently executed'
        type: boolean
        default: false
      debug_mode:
        description: 'Enable debug logging'
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.12'
  PIPELINE_TIMEOUT: 3600  # 1 hour timeout

jobs:
  check-rate-limit:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.rate_check.outputs.should_run }}
    
    steps:
      - name: Check execution rate limit
        id: rate_check
        run: |
          # Prevent too frequent executions (respect API limits)
          if [ "${{ github.event.inputs.force_run }}" == "true" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "Force run enabled, skipping rate limit"
          else
            # Add logic here to check if pipeline ran recently
            # For now, always allow (you can enhance this)
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

  run-pipeline:
    runs-on: ubuntu-latest
    needs: check-rate-limit
    if: needs.check-rate-limit.outputs.should_run == 'true'
    timeout-minutes: 60
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 🔧 Install system dependencies
        run: |
          sudo apt-get update -qq
          
          # Install essential packages
          sudo apt-get install -y \
            ffmpeg \
            libmagic1 \
            poppler-utils \
            tesseract-ocr \
            imagemagick \
            curl \
            wget
          
          # Verify FFmpeg installation
          ffmpeg -version | head -1
          ffprobe -version | head -1

      - name: 🚀 Install latest FFmpeg (for compatibility)
        run: |
          # Install latest static FFmpeg build
          wget -q https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
          tar -xf ffmpeg-release-amd64-static.tar.xz
          sudo cp ffmpeg-*-amd64-static/ff* /usr/local/bin/
          
          # Verify latest version
          echo "Updated FFmpeg version:"
          /usr/local/bin/ffmpeg -version | head -1

      - name: 📚 Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          
          # Install with timeout and retry logic
          pip install --timeout 300 --retries 3 -r requirements.txt
          
          # Verify key packages
          python -c "import moviepy; print(f'MoviePy: {moviepy.__version__}')"
          python -c "import openai; print('OpenAI Whisper: OK')" || echo "Whisper check failed"
          python -c "import requests; print(f'Requests: {requests.__version__}')"

      - name: 🔍 Environment validation
        run: |
          echo "=== Environment Check ==="
          python --version
          pip list | grep -E "(moviepy|whisper|langchain|supabase)"
          
          echo "=== System Resources ==="
          df -h
          free -h
          nproc
          
          echo "=== FFmpeg Capabilities ==="
          ffmpeg -encoders | grep -E "(aac|h264)" | head -5

      - name: 🎬 Run content pipeline
        timeout-minutes: 50
        env:
          # YouTube API
          YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
          YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
          YOUTUBE_REFRESH_TOKEN: ${{ secrets.YOUTUBE_REFRESH_TOKEN }}
          
          # AI Services
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          HEYGEN_API_KEY: ${{ secrets.HEYGEN_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
          # News & Data
          NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
          PIPFEED_API_KEY: ${{ secrets.PIPFEED_API_KEY }}
          
          # Database
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          
          # Pipeline Configuration
          DEBUG_MODE: ${{ github.event.inputs.debug_mode }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          
          #AMAZON
          AMAZON_ACCESS_KEY: ${{ secrets.AMAZON_ACCESS_KEY }}
          AMAZON_SECRET_KEY: ${{ secrets.AMAZON_SECRET_KEY }}
        run: |
          echo "🚀 Starting content automation pipeline..."
          echo "Run ID: $GITHUB_RUN_ID | Run Number: $GITHUB_RUN_NUMBER"
          
          # Create output directory
          mkdir -p outputs logs temp
          
          # Run with error handling
          python pipeline.py 2>&1 | tee logs/pipeline_${{ github.run_number }}.log
          
          echo "✅ Pipeline completed successfully!"

      - name: 📊 Upload artifacts on success
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-outputs-${{ github.run_number }}
          path: |
            outputs/
            logs/
          retention-days: 7

      - name: 📊 Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-logs-failed-${{ github.run_number }}
          path: |
            logs/
            temp/
          retention-days: 14

      - name: 🧹 Cleanup temporary files
        if: always()
        run: |
          # Clean up large temporary files to save space
          rm -rf temp/*.mp4 temp/*.wav temp/*.mp3
          du -sh temp/ || echo "Temp directory cleaned"

  notify:
    runs-on: ubuntu-latest
    needs: [check-rate-limit, run-pipeline]
    if: always() && needs.check-rate-limit.outputs.should_run == 'true'
    
    steps:
      - name: 📬 Notify on success
        if: needs.run-pipeline.result == 'success'
        run: |
          echo "✅ Content pipeline completed successfully!"
          echo "Run: ${{ github.run_number }} | Commit: ${{ github.sha }}"
          
          # Optional: Send webhook notification
          # curl -X POST "${{ secrets.WEBHOOK_URL }}" \
          #   -H "Content-Type: application/json" \
          #   -d '{"status": "success", "run": "${{ github.run_number }}"}'

      - name: 📬 Notify on failure
        if: needs.run-pipeline.result == 'failure'
        run: |
          echo "❌ Content pipeline failed!"
          echo "Run: ${{ github.run_number }} | Commit: ${{ github.sha }}"
          
          # Optional: Send failure notification
          # curl -X POST "${{ secrets.WEBHOOK_URL }}" \
          #   -H "Content-Type: application/json" \
          #   -d '{"status": "failed", "run": "${{ github.run_number }}", "error": "Pipeline execution failed"}'

      - name: 📬 Notify on skip
        if: needs.check-rate-limit.outputs.should_run == 'false'
        run: |
          echo "⏭️ Pipeline skipped due to rate limiting"
